@{
    Layout = "_LayoutAdmin"; // Sử dụng layout mới
}

@model List<Product>

<style>
    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    th,
    td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }

    th {
        background-color: #f2f2f2;
    }

    img {
        width: 100px;
        height: 100px;
        cursor: pointer;
        /* Add cursor pointer for clickable images */
    }

    tbody tr:hover {
        background-color: #f5f5f5;
        /* Change the background color on hover */
    }

    .product-details {
        display: none;
    }

    #modal {
        display: none;
    }

    #modalContent {
        max-width: 400px;
        margin: 0 auto;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    label {
        display: block;
        margin-bottom: 8px;
        font-weight: bold;
    }

    input {
        width: 100%;
        padding: 8px;
        margin-bottom: 16px;
        box-sizing: border-box;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 14px;
    }

    input[type="button"] {
        background-color: #4caf50;
        color: #fff;
        padding: 10px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    input[type="button"]:hover {
        background-color: #45a049;
    }

    .overlay {
        width: 100%;
        height: 100%;
        background-color: rgba(96, 96, 96, 0.9);
        position: fixed;
        top: 0;
        left: 0;
    }

    .modal-content {
        width: 90%;
        height: auto;
        background-color: rgb(255, 255, 255, 0.9);
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        padding: 20px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .buttons-container {
        margin-top: 20px;
    }
</style>

<h2>Products</h2>

<div style=";" id="modal">
    <div style="width: 100%; height: 100%; background-color: rgba(96, 96, 96, 0.9); z-index: 10;position: fixed; left: 0; top:
0">
        <button onclick="closeModal()">
            Đóng
        </button>
        <button onclick="handleSubmit()">
            Sửa
        </button>
    </div>
    <div style="width: 90%; height: 100%; background-color: rgb(255, 255, 255,0.9); z-index: 10;position: fixed; left: 50; top:
20">
        aaaabbc
        <div class="buttons-container">


        </div>
    </div>
</div>

<table>
    <thead>
        <tr>
            <th>Image</th>
            <th>Product Name</th>
            <th>Product Price</th>
            <th>Product Description</th>
            <th>
                #
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in Model)
        {
            //~/Images/
            <tr id="@product.ProductId">
                <td
                    onclick="handelDetai('@product.ProductId' , '@product.ProductName', '@product.ProductImg','@product.ProductPrice', '@product.ProductDes ')">
                    <img src="@product.ProductImg" alt="@product.ProductName"
                        data-details-id="details_@product.ProductId" />
                </td>
                <td>@product.ProductName</td>
                <td>@product.ProductPrice</td>
                <td>@product.ProductDes</td>
                <td onclick="deleteCart('@product.ProductId')">
                    Xóa
                </td>
            </tr>
        }

    </tbody>
</table>

<script>
    const uploadImage = async (img) => {
        const CLOUD_NAME = 'dvqmndx5j';
        const PRESET_NAME = 'upload';
        const FOLDER_NAME = 'banhang';
        const url = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`;

        const formData = new FormData();
        formData.append('upload_preset', PRESET_NAME);
        formData.append('folder', FOLDER_NAME);
        formData.append('file', img);

        try {
            const res = await fetch(url, {
                method: 'POST',
                body: formData,
                headers: {
    @* 'Content-Type': 'multipart/form-data', // Note: Don't set Content-Type, it will be automatically set by FormData *@
                    },
    });

    const data = await res.json();
    return data.secure_url;
            } catch (error) {
        console.error('Error uploading image:', error);
        // Handle error as needed
        throw error;
    }
        };

    const handelDetai = (ProductId, ProductName, ProductImg, ProductPrice, ProductDes) => {

        console.log(ProductName);

        document.getElementById('modal').style.display = "block";

        var modalContent = document.getElementById('modal').children[1];

        // Clear previous content
        modalContent.innerHTML = "";

        var productIdInput = createInput("ProductId", ProductId);
        modalContent.appendChild(productIdInput);


        // Create and append input fields with product details
        var productNameInput = createInput("Product Name", ProductName);
        modalContent.appendChild(productNameInput);

        var productImgInput = createInputFile("Image", baseUrl + ProductImg);
        modalContent.appendChild(productImgInput);

        var productPriceInput = createInput("Product Price", ProductPrice);
        modalContent.appendChild(productPriceInput);

        var productDesInput = createInput("Product Description", ProductDes);
        modalContent.appendChild(productDesInput);
    }




    const handleSubmit = async () => {

        const name = document.getElementById('form-input-Product Name').value;
        const price = document.getElementById('form-input-Product Price').value;
        const img = document.getElementById('form-input-img').src;
        const dec = document.getElementById('form-input-Product Description').value;
        const productId = document.getElementById('form-input-ProductId').value;
        const idproduct = parseInt(productId, 10);

        const imgages = await uploadImage(img);

        console.log({ imgages })

        var test = { ProductId: idproduct, ProductPrice: price, ProductName: name, ProductDes: dec, ProductImg: imgages }

        fetch("/Product/UpdateProduct", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",

            },
            body: JSON.stringify(test)

        })
            .then((data) => {
                return data.json();
            })
            .then((data) => {
                console.log(test)

                console.log({ data });
            })
            .catch(err => {
                console.log(err);
            });



    }

    const closeModal = () => {
        document.getElementById('modal').style.display = "none";

    }

    const baseUrl = "@Url.Content("~/Images/")";



    function createInput(labelText, value) {
        var container = document.createElement("div");

        var label = document.createElement("label");
        label.textContent = labelText + ": ";
        container.appendChild(label);

        var input = document.createElement("input");
        input.type = "text";
        input.value = value;
        input.className = "form-input-" + labelText;
        input.id = "form-input-" + labelText;

        container.appendChild(input);

        return container;
    }

    function createInputFile(labelText, value) {
        var container = document.createElement("div");

        var label = document.createElement("label");
        label.textContent = labelText + ": ";
        container.appendChild(label);

        var input = document.createElement("input");
        input.type = "file";
        input.className = "form-input";

        container.appendChild(input);

        // Display the current image
        var currentImage = document.createElement("img");
        currentImage.id = "form-input-img";

        currentImage.src = value;
        currentImage.style.width = "100px";
        currentImage.style.height = "100px";
        container.appendChild(currentImage);

        input.addEventListener("change", function () {
            // Update the displayed image when a new file is selected
            var reader = new FileReader();
            console.log(reader)
            reader.onload = function (e) {

                currentImage.src = e.target.result;
            };
            reader.readAsDataURL(this.files[0]);
        });

        return container;
    }


    function deleteCart(id) {
        var intNumber = parseInt(id, 10);

        console.log(intNumber)
        fetch("/Product/DeleteCart", {
            method: "Post",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                ProductId: intNumber
            })
        })
            .then((data) => {
                var element = document.getElementById(intNumber);
                element.remove();

                return data.json()
            })
            .then((data) => {
                console.log({ data });
            })
            .catch(err => {
                console.log(err)
            })
        // TODO: Update the server-side data or perform any other necessary action
    }
</script>
